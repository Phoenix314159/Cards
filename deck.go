package main

import (
	"fmt"
	"strings"
	"io/ioutil"
	"os"
	"math/rand"
	"time"
)

type deck []string // "extends" a base type and adds additional functionality to it

//d variable is like 'this' in js
     //receiver
func (d deck) print() { //any variable of type 'deck' get access to the print method
	for _, card := range d {
		fmt.Println(card)
	}
}

func newDeck() deck { //anytime newDeck is called it returns a type of deck
	cards := deck{}
	cardSuits := []string{"Spades", "Diamonds", "Hearts", "Clubs"}
	cardValues := []string{"Ace", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine"}
	for _, suit := range cardSuits { // builds new deck by appending concatenated string to deck
		for _, value := range cardValues {
			cards = append(cards, value + " of " + suit)
		}
	}
	return cards
}
          //arguments           //return values
func deal(d deck, handSize int) (deck, deck) { //this function splits up the deck with the handSize and returns two values each of type deck
	return d[:handSize], d[handSize:] // first value returned is a 'slice' of the deck slice up to and including handSize
}	                                  // second value returned is the remaining deck

func (d deck) toString() string {  //takes a deck and turns it into a string
	return strings.Join([]string(d), ", ")      // joins slice of strings into one string separated by commas
}

func (d deck) saveToFile(filename string) error{
	                            //converts deck to a byte slice after it is converted to a string
	return ioutil.WriteFile(filename, []byte(d.toString()), 0666)
}

func newDeckFromFile(filename string) deck {
	bs, err := ioutil.ReadFile(filename)
	if err != nil {
		fmt.Println("Error:", err)
		os.Exit(1)  //terminates program execution with a non-zero code
	}                   //converts byte slice to string
	s := strings.Split(string(bs), ", ")  //separates string by ,
	return deck(s)  //converts string to type deck
}

func (d deck) shuffle() {
	source := rand.NewSource(time.Now().UnixNano())   //new seed to generate totally random numbers comes from int644
	r := rand.New(source)  // our new random number generator                             // generated by time.Now()
	for i := range d {
		nP := r.Intn(len(d) -1) //generates a random number between 0 and the length of the slice minus 1
		d[i], d[nP] = d[nP], d[i]  //swap elements
	}
}